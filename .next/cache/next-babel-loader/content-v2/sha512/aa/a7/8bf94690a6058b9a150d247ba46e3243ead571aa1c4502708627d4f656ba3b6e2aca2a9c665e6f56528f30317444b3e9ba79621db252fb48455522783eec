{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aluraquiz-startrek\\\\src\\\\screens\\\\Quiz\\\\index.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react'; //import { Lottie } from '@crello/react-lottie';\n// import db from '../../../db.json';\n\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativeForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BlackLinkArrow';\nimport loadingAnimation from '../Quiz/animations/loading.json';\n\nfunction ResultWidget({\n  results\n}) {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Tela de Resultado:\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Voc\\xEA acertou\", ' ', results.filter(x => x).length, ' ', \"perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, results.map((result, index) => __jsx(\"li\", {\n    key: `result__${result}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"#\", index + 1, ' ', \"Resultado:\", result === true ? 'Acertou' : 'Errou')))));\n}\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Lottie, {\n    width: \"200px\",\n    height: \"200px\",\n    className: \"lottie-container basic\",\n    config: {\n      animationData: loadingAnimation,\n      loop: true,\n      autoplay: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions}`)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: infosDoEvento => {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(() => {\n        addResult(isCorrect);\n        onSubmit();\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    const isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 47\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage({\n  externalQuestions,\n  externalBg\n}) {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = externalQuestions[questionIndex];\n  const totalQuestions = externalQuestions.length;\n  const bg = externalBg;\n\n  function addResult(result) {\n    setResults([...results, result]);\n  }\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000);\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 49\n    }\n  })));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/aluraquiz-startrek/src/screens/Quiz/index.js"],"names":["React","Widget","QuizLogo","QuizBackground","QuizContainer","AlternativesForm","Button","BackLinkArrow","loadingAnimation","ResultWidget","results","filter","x","length","map","result","index","LoadingWidget","display","justifyContent","animationData","loop","autoplay","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","addResult","selectedAlternative","setSelectedAlternative","useState","undefined","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","screenStates","QUIZ","LOADING","RESULT","QuizPage","externalQuestions","externalBg","screenState","setScreenState","setResults","currentQuestion","setCurrentQuestion","bg","useEffect","handleSubmitQuiz","nextQuestion"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\n//import { Lottie } from '@crello/react-lottie';\r\n// import db from '../../../db.json';\r\nimport Widget from '../../components/Widget';\r\nimport QuizLogo from '../../components/QuizLogo';\r\nimport QuizBackground from '../../components/QuizBackground';\r\nimport QuizContainer from '../../components/QuizContainer';\r\nimport AlternativesForm from '../../components/AlternativeForm';\r\nimport Button from '../../components/Button';\r\nimport BackLinkArrow from '../../components/BlackLinkArrow';\r\nimport loadingAnimation from '../Quiz/animations/loading.json';\r\n\r\nfunction ResultWidget({ results }) {\r\n  return (\r\n    <Widget>\r\n      <Widget.Header>\r\n        Tela de Resultado:\r\n      </Widget.Header>\r\n\r\n      <Widget.Content>\r\n        <p>\r\n          Você acertou\r\n          {' '}\r\n          {results.filter((x) => x).length}\r\n          {' '}\r\n          perguntas\r\n        </p>\r\n        <ul>\r\n          {results.map((result, index) => (\r\n            <li key={`result__${result}`}>\r\n              #\r\n              {index + 1}\r\n              {' '}\r\n              Resultado:\r\n              {result === true\r\n                ? 'Acertou'\r\n                : 'Errou'}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </Widget.Content>\r\n    </Widget>\r\n  );\r\n}\r\n\r\nfunction LoadingWidget() {\r\n  return (\r\n    <Widget>\r\n      <Widget.Header>\r\n        Carregando...\r\n      </Widget.Header>\r\n\r\n      <Widget.Content style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <Lottie\r\n          width=\"200px\"\r\n          height=\"200px\"\r\n          className=\"lottie-container basic\"\r\n          config={{ animationData: loadingAnimation, loop: true, autoplay: true }}\r\n        />\r\n      </Widget.Content>\r\n    </Widget>\r\n  );\r\n}\r\n\r\nfunction QuestionWidget({\r\n  question,\r\n  questionIndex,\r\n  totalQuestions,\r\n  onSubmit,\r\n  addResult,\r\n}) {\r\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\r\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\r\n  const questionId = `question__${questionIndex}`;\r\n  const isCorrect = selectedAlternative === question.answer;\r\n  const hasAlternativeSelected = selectedAlternative !== undefined;\r\n\r\n  return (\r\n    <Widget>\r\n      <Widget.Header>\r\n        <BackLinkArrow href=\"/\" />\r\n        <h3>\r\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\r\n        </h3>\r\n      </Widget.Header>\r\n\r\n      <img\r\n        alt=\"Descrição\"\r\n        style={{\r\n          width: '100%',\r\n          height: '150px',\r\n          objectFit: 'cover',\r\n        }}\r\n        src={question.image}\r\n      />\r\n      <Widget.Content>\r\n        <h2>\r\n          {question.title}\r\n        </h2>\r\n        <p>\r\n          {question.description}\r\n        </p>\r\n\r\n        <AlternativesForm\r\n          onSubmit={(infosDoEvento) => {\r\n            infosDoEvento.preventDefault();\r\n            setIsQuestionSubmited(true);\r\n            setTimeout(() => {\r\n              addResult(isCorrect);\r\n              onSubmit();\r\n              setIsQuestionSubmited(false);\r\n              setSelectedAlternative(undefined);\r\n            }, 3 * 1000);\r\n          }}\r\n        >\r\n          {question.alternatives.map((alternative, alternativeIndex) => {\r\n            const alternativeId = `alternative__${alternativeIndex}`;\r\n            const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\r\n            const isSelected = selectedAlternative === alternativeIndex;\r\n            return (\r\n              <Widget.Topic\r\n                as=\"label\"\r\n                key={alternativeId}\r\n                htmlFor={alternativeId}\r\n                data-selected={isSelected}\r\n                data-status={isQuestionSubmited && alternativeStatus}\r\n              >\r\n                <input\r\n                  style={{ display: 'none' }}\r\n                  id={alternativeId}\r\n                  name={questionId}\r\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\r\n                  type=\"radio\"\r\n                />\r\n                {alternative}\r\n              </Widget.Topic>\r\n            );\r\n          })}\r\n          \r\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\r\n            Confirmar\r\n          </Button>\r\n          {isQuestionSubmited && isCorrect && <p>Você acertou!</p>}\r\n          {isQuestionSubmited && !isCorrect && <p>Você errou!</p>}\r\n        </AlternativesForm>\r\n      </Widget.Content>\r\n    </Widget>\r\n  );\r\n}\r\n\r\nconst screenStates = {\r\n  QUIZ: 'QUIZ',\r\n  LOADING: 'LOADING',\r\n  RESULT: 'RESULT',\r\n};\r\nexport default function QuizPage({ externalQuestions, externalBg }) {\r\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\r\n  const [results, setResults] = React.useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\r\n  const questionIndex = currentQuestion;\r\n  const question = externalQuestions[questionIndex];\r\n  const totalQuestions = externalQuestions.length;\r\n  const bg = externalBg;\r\n\r\n  function addResult(result) {\r\n    setResults([\r\n      ...results,\r\n      result,\r\n    ]);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setScreenState(screenStates.QUIZ);\r\n    }, 1 * 2000);\r\n  }, []);\r\n\r\n  function handleSubmitQuiz() {\r\n    const nextQuestion = questionIndex + 1;\r\n    if (nextQuestion < totalQuestions) {\r\n      setCurrentQuestion(nextQuestion);\r\n    } else {\r\n      setScreenState(screenStates.RESULT);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <QuizBackground backgroundImage={bg}>\r\n      <QuizContainer>\r\n        <QuizLogo />\r\n        {screenState === screenStates.QUIZ && (\r\n          <QuestionWidget\r\n            question={question}\r\n            questionIndex={questionIndex}\r\n            totalQuestions={totalQuestions}\r\n            onSubmit={handleSubmitQuiz}\r\n            addResult={addResult}\r\n          />\r\n        )}\r\n\r\n        {screenState === screenStates.LOADING && <LoadingWidget />}\r\n\r\n        {screenState === screenStates.RESULT && <ResultWidget results={results} />}\r\n      </QuizContainer>\r\n    </QuizBackground>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}
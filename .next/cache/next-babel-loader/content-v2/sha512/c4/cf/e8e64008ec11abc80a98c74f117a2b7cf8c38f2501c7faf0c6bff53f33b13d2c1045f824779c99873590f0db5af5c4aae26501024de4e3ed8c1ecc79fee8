{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aluraquiz-startrek\\\\pages\\\\quiz.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport db from '../db.json';\nimport { motion } from 'framer-motion';\nimport Link from '../src/components/Link';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\nimport AlternativesForm from '../src/components/AlternativeForm';\nimport LoadingOrbits from '../src/components/Loading';\nimport BackLinkArrow from '../src/components/BlackLinkArrow';\nimport GitHubCorner from '../src/components/GitHubCorner';\n\nfunction LoadingScreen() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, \"Carregando Pergunta...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, __jsx(LoadingOrbits, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  })));\n}\n\n_c = LoadingScreen;\n\nfunction ResultWidget(_ref) {\n  var _this = this;\n\n  var results = _ref.results;\n  return __jsx(Widget, {\n    as: motion.section,\n    transition: {\n      delay: 0.5,\n      duration: 0.5\n    },\n    variants: {\n      show: {\n        opacity: 1\n      },\n      hidden: {\n        opacity: 0\n      }\n    },\n    initial: \"hidden\",\n    animate: \"show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), \" Pontua\\xE7\\xE3o\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"voce acertou \", results.filter(function (x) {\n    return x;\n  }).length, \" questoes, parab\\xE9ns!\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, results.map(function (result, questionIndex) {\n    return __jsx(\"li\", {\n      key: \"result__\".concat(result),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"#0\", questionIndex + 1, \" Resultado: \", result === true ? 'Acertou' : 'Errou');\n  }))), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Quizes da Galera\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, db.external.map(function (linkExterno) {\n    var _linkExterno$replace$ = linkExterno.replace(/\\//g, '').replace('https:', '').replace('.vercel.app', '').split('.'),\n        _linkExterno$replace$2 = _slicedToArray(_linkExterno$replace$, 2),\n        projectName = _linkExterno$replace$2[0],\n        githubUser = _linkExterno$replace$2[1];\n\n    return __jsx(\"li\", {\n      key: linkExterno,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, __jsx(Widget.Topic, {\n      as: Link,\n      disabled: name.length === 0,\n      href: \"/quiz/\".concat(projectName, \"___\").concat(githubUser),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, \"\".concat(githubUser, \"/\").concat(projectName)));\n  }))), __jsx(GitHubCorner, {\n    projectUrl: \"https://github.com/juniorsn1409/aluraquiz-startrek.git\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }));\n}\n\n_c2 = ResultWidget;\n\nfunction QuestionWidget(_ref2) {\n  _s();\n\n  var _this2 = this;\n\n  var question = _ref2.question,\n      questionIndex = _ref2.questionIndex,\n      totalQuestions = _ref2.totalQuestions,\n      _onSubmit = _ref2.onSubmit,\n      addResults = _ref2.addResults;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isQuestionSubmited = _React$useState4[0],\n      setIsQuestionSubmited = _React$useState4[1];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  var hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), \" \", \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'display'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(function () {\n        addResults(isCorrect);\n\n        _onSubmit();\n\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 2 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    var alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    var isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 37\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect, isQuestionSubmited && !isCorrect)));\n}\n\n_s(QuestionWidget, \"gOPL1EmksK8wUP52KQZyVU1FVK0=\");\n\n_c3 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s2();\n\n  var _React$useState5 = React.useState(screenStates.LOADING),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      results = _React$useState8[0],\n      setResults = _React$useState8[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      currentQuestion = _React$useState10[0],\n      setCurrentQuestion = _React$useState10[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex];\n\n  function addResults(result) {\n    //results.push(result); funciona\n    setResults([].concat(_toConsumableArray(results), [result]));\n  } //[React chama de: Efeitos|| Effects] ciclo de estados!\n  //React.useEffet\n  // atualizado === WillUpdate\n  //morre === willUnmount\n\n\n  React.useEffect(function () {\n    //fetch()...\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); //nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResults: addResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 58\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 58\n    }\n  })));\n}\n\n_s2(QuizPage, \"op6a2G6WeNFK4t0JnGKr98IrMhU=\");\n\n_c4 = QuizPage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LoadingScreen\");\n$RefreshReg$(_c2, \"ResultWidget\");\n$RefreshReg$(_c3, \"QuestionWidget\");\n$RefreshReg$(_c4, \"QuizPage\");","map":{"version":3,"sources":["C:/xampp/htdocs/aluraquiz-startrek/pages/quiz.js"],"names":["React","db","motion","Link","Widget","QuizLogo","QuizBackground","QuizContainer","Button","AlternativesForm","LoadingOrbits","BackLinkArrow","GitHubCorner","LoadingScreen","ResultWidget","results","section","delay","duration","show","opacity","hidden","filter","x","length","map","result","questionIndex","external","linkExterno","replace","split","projectName","githubUser","name","QuestionWidget","question","totalQuestions","onSubmit","addResults","useState","undefined","selectedAlternative","setSelectedAlternative","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","setResults","questions","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport db from '../db.json';\r\nimport { motion } from 'framer-motion';\r\n\r\nimport Link from '../src/components/Link';\r\nimport Widget from '../src/components/Widget';\r\nimport QuizLogo from '../src/components/QuizLogo';\r\nimport QuizBackground from '../src/components/QuizBackground';\r\nimport QuizContainer from '../src/components/QuizContainer';\r\nimport Button from '../src/components/Button';\r\nimport AlternativesForm from '../src/components/AlternativeForm';\r\nimport LoadingOrbits from '../src/components/Loading'\r\nimport BackLinkArrow from '../src/components/BlackLinkArrow';\r\nimport GitHubCorner from '../src/components/GitHubCorner';\r\n\r\nfunction LoadingScreen() {\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                Carregando Pergunta...\r\n            </Widget.Header>\r\n        \r\n            <Widget.Content>\r\n                <LoadingOrbits/>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nfunction ResultWidget({results}) {\r\n    return (\r\n  \r\n        <Widget\r\n        as={motion.section}\r\n        transition={{ delay: 0.5, duration: 0.5 }}\r\n        variants={{\r\n          show: { opacity: 1 },\r\n          hidden: { opacity: 0 },\r\n        }}\r\n        initial=\"hidden\"\r\n        animate=\"show\"\r\n        >\r\n            <Widget.Header>\r\n            <BackLinkArrow href=\"/\" /> Pontuação\r\n            </Widget.Header>\r\n        \r\n            <Widget.Content>\r\n            <p>{`voce acertou `}\r\n                {results.filter((x) => x).length}\r\n                {` questoes, parabéns!`}\r\n            \r\n            </p>\r\n            <ul>\r\n                {results.map((result, questionIndex) =>(\r\n                    <li key = {`result__${result}`}>\r\n                        #0{questionIndex + 1} Resultado: {result === true ? 'Acertou': 'Errou'}\r\n                    </li>                    \r\n                ))}\r\n\r\n            </ul>\r\n            </Widget.Content>\r\n\r\n            <Widget.Content>\r\n            <h1>Quizes da Galera</h1>\r\n            <ul>\r\n                {db.external.map((linkExterno) => {\r\n                const [projectName, githubUser] = linkExterno\r\n                    .replace(/\\//g, '')\r\n                    .replace('https:', '')\r\n                    .replace('.vercel.app', '')\r\n                    .split('.');\r\n\r\n                return (\r\n                    <li key={linkExterno}>\r\n                    <Widget.Topic\r\n                        as={Link}\r\n                        disabled={name.length === 0}\r\n                        href={`/quiz/${projectName}___${githubUser}`}\r\n                    >\r\n                        {`${githubUser}/${projectName}`}\r\n                    </Widget.Topic>\r\n                    </li>\r\n                );\r\n                })}\r\n            </ul>\r\n            </Widget.Content>\r\n            <GitHubCorner projectUrl=\"https://github.com/juniorsn1409/aluraquiz-startrek.git\" />\r\n        </Widget>\r\n    );\r\n}\r\n\r\nfunction QuestionWidget( {\r\n    question, \r\n    questionIndex, \r\n    totalQuestions,\r\n    onSubmit,\r\n    addResults,\r\n} ) {\r\n    const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\r\n    const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\r\n    const questionId =`question__${questionIndex}`;\r\n    const isCorrect = selectedAlternative === question.answer;\r\n    const hasAlternativeSelected = selectedAlternative !== undefined;\r\n\r\n    return (\r\n        <Widget>\r\n            \r\n            <Widget.Header>\r\n                <h3>\r\n                    <BackLinkArrow href=\"/\" /> {`Pergunta ${questionIndex  + 1} de ${totalQuestions}`}\r\n                </h3>\r\n            </Widget.Header>\r\n            <img\r\n                alt=\"Descrição\"\r\n                style = \r\n                {\r\n                    {\r\n                        width:'100%', height:'150px', objectFit:'display',\r\n                    }\r\n                }\r\n                src= {question.image}\r\n            \r\n            />\r\n            <Widget.Content>\r\n                <h2>\r\n                    {question.title}\r\n                </h2>\r\n                <p>\r\n                    {question.description}\r\n                </p>\r\n                <AlternativesForm \r\n                    onSubmit={(infosDoEvento) =>{\r\n                            infosDoEvento.preventDefault();\r\n                            setIsQuestionSubmited(true);\r\n                            setTimeout(() => {\r\n                            addResults(isCorrect);\r\n                                onSubmit();\r\n                                setIsQuestionSubmited(false);\r\n                                setSelectedAlternative(undefined);\r\n                        },  2 * 1000)\r\n                        \r\n                    }}\r\n                >\r\n                    {question.alternatives.map( (alternative, alternativeIndex) => {\r\n                        const alternativeId = `alternative__${alternativeIndex}`;\r\n                        const alternativeStatus =  isCorrect ? 'SUCCESS' : 'ERROR';\r\n                        const isSelected = selectedAlternative === alternativeIndex;\r\n                        return (\r\n                                <Widget.Topic \r\n                                as=\"label\" \r\n                                key={alternativeId} \r\n                                htmlFor={alternativeId}\r\n                                data-selected={isSelected}\r\n                                data-status={isQuestionSubmited && alternativeStatus}\r\n                                >\r\n                                    <input\r\n                                    style={{display:'none'}}    \r\n                                    id={alternativeId}\r\n                                    name={questionId}\r\n                                    onChange={() => setSelectedAlternative(alternativeIndex) }\r\n                                    type=\"radio\" \r\n                                    />\r\n                                    {alternative}\r\n                                </Widget.Topic>\r\n                                );\r\n                            }\r\n                        )\r\n                    }\r\n                    { /*<pre>\r\n                        {JSON.stringify(question, null, 4)}\r\n                    </pre> */}\r\n\r\n                    <Button type=\"submit\" disabled={!hasAlternativeSelected}>\r\n                        Confirmar\r\n                    </Button>\r\n                    {isQuestionSubmited && isCorrect }\r\n                    {isQuestionSubmited && !isCorrect }\r\n                </AlternativesForm>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nconst screenStates = {\r\n    QUIZ:'QUIZ',\r\n    LOADING:'LOADING',\r\n    RESULT:'RESULT',\r\n};\r\n\r\nexport default function QuizPage() {\r\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\r\n    const [results, setResults] = React.useState([]);\r\n    const totalQuestions = db.questions.length;\r\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\r\n    const questionIndex = currentQuestion;\r\n    const question = db.questions[questionIndex];\r\n\r\n    function addResults(result) {\r\n        //results.push(result); funciona\r\n        setResults([\r\n            ...results,\r\n            result,\r\n        ]) \r\n    }\r\n\r\n    //[React chama de: Efeitos|| Effects] ciclo de estados!\r\n    //React.useEffet\r\n    // atualizado === WillUpdate\r\n    //morre === willUnmount\r\n    React.useEffect(() => {\r\n        //fetch()...\r\n        setTimeout(() => {\r\n            setScreenState(screenStates.QUIZ);\r\n        }, 1* 1000);\r\n    //nasce === didMount\r\n    }, []);\r\n\r\n    function handleSubmitQuiz() {\r\n        const nextQuestion = questionIndex + 1;\r\n\r\n        if (nextQuestion < totalQuestions) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setScreenState(screenStates.RESULT);\r\n        }\r\n        \r\n    }\r\n\r\n    return (  \r\n        <QuizBackground backgroundImage={db.bg}>\r\n            <QuizContainer>\r\n                <QuizLogo />\r\n                {screenState === screenStates.QUIZ && (\r\n                    <QuestionWidget\r\n                        question = {question} \r\n                        questionIndex = {questionIndex} \r\n                        totalQuestions = {totalQuestions} \r\n                        onSubmit = {handleSubmitQuiz}\r\n                        addResults = {addResults}\r\n                    />\r\n                )}\r\n                {screenState === screenStates.LOADING && <LoadingScreen />}\r\n\r\n                {screenState === screenStates.RESULT  && <ResultWidget results = {results} /> }\r\n\r\n            </QuizContainer>\r\n        </QuizBackground>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
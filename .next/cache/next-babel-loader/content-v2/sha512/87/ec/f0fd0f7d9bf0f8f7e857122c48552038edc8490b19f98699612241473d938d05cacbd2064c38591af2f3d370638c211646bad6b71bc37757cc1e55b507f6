{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aluraquiz-startrek\\\\pages\\\\quiz.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\nimport LoadingOrbits from '../src/components/Loading';\n\nfunction LoadingScreen() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Carregando Pergunta...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, __jsx(LoadingOrbits, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  })));\n}\n\n_c = LoadingScreen;\n\nfunction QuestionWidget(_ref) {\n  _s();\n\n  var _this = this;\n\n  var question = _ref.question,\n      questionIndex = _ref.questionIndex,\n      totalQuestions = _ref.totalQuestions,\n      onSubmit = _ref.onSubmit;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      isFormSubmited = _React$useState4[0];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'display'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    console.log('Fala um A pra voce ver!');\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Confirmar\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, \"selectedAlternative: \", \"\".concat(selectedAlternative)), isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }\n  }, \"voc\\xEA acertou!\"), !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 36\n    }\n  }, \"voc\\xEA errou!\"))));\n}\n\n_s(QuestionWidget, \"cTqBrJF8J4+jRirbIyQLbBuGzfU=\");\n\n_c2 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s2();\n\n  var _React$useState5 = React.useState(screenStates.LOADING),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      currentQuestion = _React$useState8[0],\n      setCurrentQuestion = _React$useState8[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex]; //[React chama de: Efeitos|| Effects] ciclo de estados!\n  //React.useEffet\n  // atualizado === WillUpdate\n  //morre === willUnmount\n\n  React.useEffect(function () {\n    //fetch()...\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); //nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 58\n    }\n  }), screenState === screenStates.RESULT && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 57\n    }\n  }, \" voce acertou x questoes, parab\\xE9ns!\")));\n}\n\n_s2(QuizPage, \"uFzTItWrf72xkd+gzQBa3gJACYU=\");\n\n_c3 = QuizPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LoadingScreen\");\n$RefreshReg$(_c2, \"QuestionWidget\");\n$RefreshReg$(_c3, \"QuizPage\");","map":{"version":3,"sources":["C:/xampp/htdocs/aluraquiz-startrek/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","LoadingOrbits","LoadingScreen","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","useState","undefined","selectedAlternative","setSelectedAlternative","isFormSubmited","questionId","isCorrect","answer","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","alternatives","map","alternative","alternativeIndex","console","log","alternativeId","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","questions","length","currentQuestion","setCurrentQuestion","useEffect","setTimeout","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport db from '../db.json';\r\n\r\nimport Widget from '../src/components/Widget';\r\nimport QuizLogo from '../src/components/QuizLogo';\r\nimport QuizBackground from '../src/components/QuizBackground';\r\nimport QuizContainer from '../src/components/QuizContainer';\r\nimport Button from '../src/components/Button';\r\nimport LoadingOrbits from '../src/components/Loading'\r\n\r\nfunction LoadingScreen() {\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                Carregando Pergunta...\r\n            </Widget.Header>\r\n        \r\n            <Widget.Content>\r\n                <LoadingOrbits/>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nfunction QuestionWidget( {\r\n    question, \r\n    questionIndex, \r\n    totalQuestions,\r\n    onSubmit ,\r\n} ) {\r\n    const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\r\n    const [isFormSubmited, ] = React.useState();\r\n    const questionId =`question__${questionIndex}`;\r\n    const isCorrect = selectedAlternative === question.answer;\r\n\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                <h3>\r\n                    {`Pergunta ${questionIndex  + 1} de ${totalQuestions}`}\r\n                </h3>\r\n            </Widget.Header>\r\n            <img\r\n                alt=\"Descrição\"\r\n                style = \r\n                {\r\n                    {\r\n                        width:'100%', height:'150px', objectFit:'display',\r\n                    }\r\n                }\r\n                src= {question.image}\r\n            \r\n            />\r\n            <Widget.Content>\r\n                <h2>\r\n                    {question.title}\r\n                </h2>\r\n                <p>\r\n                    {question.description}\r\n                </p>\r\n                <form \r\n                    onSubmit={(infosDoEvento) =>{\r\n                        infosDoEvento.preventDefault();\r\n                    }}\r\n                >\r\n                    {question.alternatives.map( (alternative, alternativeIndex) => {\r\n                        console.log('Fala um A pra voce ver!');\r\n                        const alternativeId = `alternative__${alternativeIndex}`;\r\n\r\n                        return (\r\n                                <Widget.Topic as=\"label\" key={alternativeId} htmlFor ={alternativeId} >\r\n                                    <input\r\n                                    style={{display:'none'}}\r\n                                    id={alternativeId}\r\n                                    name={questionId}\r\n                                    onChange={() => setSelectedAlternative(alternativeIndex) }\r\n                                    type=\"radio\" \r\n                                    />\r\n                                    {alternative}\r\n                                </Widget.Topic>\r\n                                );\r\n                            }\r\n                        )\r\n                    }\r\n                    { /*<pre>\r\n                        {JSON.stringify(question, null, 4)}\r\n                    </pre> */}\r\n\r\n                    <Button type=\"submit\">\r\n                        Confirmar\r\n                    </Button>\r\n                    <p>selectedAlternative: {`${selectedAlternative}`}</p>\r\n                    {isCorrect && <p>você acertou!</p>}\r\n                    {!isCorrect && <p>você errou!</p>}\r\n                </form>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nconst screenStates = {\r\n    QUIZ:'QUIZ',\r\n    LOADING:'LOADING',\r\n    RESULT:'RESULT',\r\n};\r\n\r\nexport default function QuizPage() {\r\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\r\n    const totalQuestions = db.questions.length\r\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\r\n    const questionIndex = currentQuestion;\r\n    const question = db.questions[questionIndex];\r\n\r\n    //[React chama de: Efeitos|| Effects] ciclo de estados!\r\n    //React.useEffet\r\n    // atualizado === WillUpdate\r\n    //morre === willUnmount\r\n    React.useEffect(() => {\r\n        //fetch()...\r\n        setTimeout(() => {\r\n            setScreenState(screenStates.QUIZ);\r\n        }, 1* 1000);\r\n    //nasce === didMount\r\n    }, []);\r\n\r\n    function handleSubmitQuiz() {\r\n        const nextQuestion = questionIndex + 1;\r\n\r\n        if (nextQuestion < totalQuestions) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setScreenState(screenStates.RESULT);\r\n        }\r\n        \r\n    }\r\n\r\n    return (  \r\n        <QuizBackground backgroundImage={db.bg}>\r\n            <QuizContainer>\r\n                <QuizLogo />\r\n                {screenState === screenStates.QUIZ && (\r\n                    <QuestionWidget\r\n                        question = {question} \r\n                        questionIndex = {questionIndex} \r\n                        totalQuestions = {totalQuestions} \r\n                        onSubmit = {handleSubmitQuiz}\r\n                    />\r\n                )}\r\n                {screenState === screenStates.LOADING && <LoadingScreen />}\r\n\r\n                {screenState === screenStates.RESULT && <div> voce acertou x questoes, parabéns!</div> }\r\n            </QuizContainer>\r\n        </QuizBackground>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
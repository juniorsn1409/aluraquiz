{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aluraquiz-startrek\\\\pages\\\\quiz.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\nimport LoadingOrbits from '../src/components/Loading';\n\nfunction LoadingScreen() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Carregando Pergunta...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, __jsx(LoadingOrbits, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  })));\n}\n\nfunction ResultWidget({\n  results\n}) {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Pontos\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, `voce acertou `, results.filter(x => x).length, ` questoes, parabÃ©ns!`), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, results.map((results, questionIndex) => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"#0\", questionIndex + 1, \" Resultado: \", results === true ? 'Acertou' : 'Errou')))));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  addResults\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions}`)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'display'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: infosDoEvento => {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(() => {\n        addResults(isCorrect);\n        onSubmit();\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 57\n    }\n  }, \"voc\\xEA acertou!\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 58\n    }\n  }, \"voc\\xEA errou!\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  function addResults(result) {\n    results.push(result);\n    setResults([...results, result]);\n  } //[React chama de: Efeitos|| Effects] ciclo de estados!\n  //React.useEffet\n  // atualizado === WillUpdate\n  //morre === willUnmount\n\n\n  React.useEffect(() => {\n    //fetch()...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); //nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResults: addResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 58\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 58\n    }\n  })));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/aluraquiz-startrek/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","LoadingOrbits","LoadingScreen","ResultWidget","results","filter","x","length","map","questionIndex","QuestionWidget","question","totalQuestions","addResults","selectedAlternative","setSelectedAlternative","useState","undefined","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","onSubmit","alternatives","alternative","alternativeIndex","alternativeId","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","setResults","questions","currentQuestion","setCurrentQuestion","result","push","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport db from '../db.json';\r\n\r\nimport Widget from '../src/components/Widget';\r\nimport QuizLogo from '../src/components/QuizLogo';\r\nimport QuizBackground from '../src/components/QuizBackground';\r\nimport QuizContainer from '../src/components/QuizContainer';\r\nimport Button from '../src/components/Button';\r\nimport LoadingOrbits from '../src/components/Loading'\r\n\r\nfunction LoadingScreen() {\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                Carregando Pergunta...\r\n            </Widget.Header>\r\n        \r\n            <Widget.Content>\r\n                <LoadingOrbits/>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nfunction ResultWidget({results}) {\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                Pontos\r\n            </Widget.Header>\r\n        \r\n            <Widget.Content>\r\n            <p>{`voce acertou `}\r\n                {/*results.reduce((somatoriaAtual, resultAtual) => {\r\n                    const isAcerto = resultAtual === true;\r\n                    if (isAcerto) {\r\n                        return somatoriaAtual + 1;\r\n                    }PAULO DEUS\r\n                    return somatoriaAtual\r\n                }, 0)*/} \r\n                {results.filter((x) => x).length}\r\n                {` questoes, parabÃ©ns!`}\r\n            \r\n            </p>\r\n            <ul>\r\n                {results.map((results, questionIndex) =>(\r\n                    <li>\r\n                        #0{questionIndex + 1} Resultado: {results === true ? 'Acertou': 'Errou'}\r\n                    </li>                    \r\n                ))}\r\n\r\n            </ul>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nfunction QuestionWidget( {\r\n    question, \r\n    questionIndex, \r\n    totalQuestions,\r\n    addResults,\r\n} ) {\r\n    const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\r\n    const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\r\n    const questionId =`question__${questionIndex}`;\r\n    const isCorrect = selectedAlternative === question.answer;\r\n    const hasAlternativeSelected = selectedAlternative !== undefined;\r\n\r\n    return (\r\n        <Widget>\r\n            <Widget.Header>\r\n                <h3>\r\n                    {`Pergunta ${questionIndex  + 1} de ${totalQuestions}`}\r\n                </h3>\r\n            </Widget.Header>\r\n            <img\r\n                alt=\"DescriÃ§Ã£o\"\r\n                style = \r\n                {\r\n                    {\r\n                        width:'100%', height:'150px', objectFit:'display',\r\n                    }\r\n                }\r\n                src= {question.image}\r\n            \r\n            />\r\n            <Widget.Content>\r\n                <h2>\r\n                    {question.title}\r\n                </h2>\r\n                <p>\r\n                    {question.description}\r\n                </p>\r\n                <form \r\n                    onSubmit={(infosDoEvento) =>{\r\n                            infosDoEvento.preventDefault();\r\n                            setIsQuestionSubmited(true);\r\n                            setTimeout(() => {\r\n                            addResults(isCorrect);\r\n                                onSubmit();\r\n                                setIsQuestionSubmited(false);\r\n                                setSelectedAlternative(undefined);\r\n                        },  3 * 1000)\r\n                        \r\n                    }}\r\n                >\r\n                    {question.alternatives.map( (alternative, alternativeIndex) => {\r\n                        const alternativeId = `alternative__${alternativeIndex}`;\r\n\r\n                        return (\r\n                                <Widget.Topic as=\"label\" key={alternativeId} htmlFor ={alternativeId} >\r\n                                    <input\r\n                                    style={{display:'none'}}\r\n                                    id={alternativeId}\r\n                                    name={questionId}\r\n                                    onChange={() => setSelectedAlternative(alternativeIndex) }\r\n                                    type=\"radio\" \r\n                                    />\r\n                                    {alternative}\r\n                                </Widget.Topic>\r\n                                );\r\n                            }\r\n                        )\r\n                    }\r\n                    { /*<pre>\r\n                        {JSON.stringify(question, null, 4)}\r\n                    </pre> */}\r\n\r\n                    <Button type=\"submit\" disabled={!hasAlternativeSelected}>\r\n                        Confirmar\r\n                    </Button>\r\n                    {isQuestionSubmited && isCorrect && <p>vocÃª acertou!</p>}\r\n                    {isQuestionSubmited && !isCorrect && <p>vocÃª errou!</p>}\r\n                </form>\r\n            </Widget.Content>\r\n        </Widget>\r\n    );\r\n}\r\n\r\nconst screenStates = {\r\n    QUIZ:'QUIZ',\r\n    LOADING:'LOADING',\r\n    RESULT:'RESULT',\r\n};\r\n\r\nexport default function QuizPage() {\r\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\r\n    const [results, setResults] = React.useState([]);\r\n    const totalQuestions = db.questions.length;\r\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\r\n    const questionIndex = currentQuestion;\r\n    const question = db.questions[questionIndex];\r\n\r\n    function addResults(result) {\r\n        results.push(result);\r\n        setResults([\r\n            ...results,\r\n            result,\r\n        ]) \r\n    }\r\n\r\n    //[React chama de: Efeitos|| Effects] ciclo de estados!\r\n    //React.useEffet\r\n    // atualizado === WillUpdate\r\n    //morre === willUnmount\r\n    React.useEffect(() => {\r\n        //fetch()...\r\n        setTimeout(() => {\r\n            setScreenState(screenStates.QUIZ);\r\n        }, 1* 1000);\r\n    //nasce === didMount\r\n    }, []);\r\n\r\n    function handleSubmitQuiz() {\r\n        const nextQuestion = questionIndex + 1;\r\n\r\n        if (nextQuestion < totalQuestions) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setScreenState(screenStates.RESULT);\r\n        }\r\n        \r\n    }\r\n\r\n    return (  \r\n        <QuizBackground backgroundImage={db.bg}>\r\n            <QuizContainer>\r\n                <QuizLogo />\r\n                {screenState === screenStates.QUIZ && (\r\n                    <QuestionWidget\r\n                        question = {question} \r\n                        questionIndex = {questionIndex} \r\n                        totalQuestions = {totalQuestions} \r\n                        onSubmit = {handleSubmitQuiz}\r\n                        addResults = {addResults}\r\n                    />\r\n                )}\r\n                {screenState === screenStates.LOADING && <LoadingScreen />}\r\n\r\n                {screenState === screenStates.RESULT  && <ResultWidget results = {results} />}\r\n            </QuizContainer>\r\n        </QuizBackground>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
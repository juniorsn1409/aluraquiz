{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aluraquiz-startrek\\\\pages\\\\quiz.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, \"[Desafio do Loading]\"));\n}\n\n_c = LoadingWidget;\n\nfunction QuestionWidget(_ref) {\n  var _this = this;\n\n  var question = _ref.question,\n      questionIndex = _ref.questionIndex,\n      totalQuestions = _ref.totalQuestions,\n      _onSubmit = _ref.onSubmit;\n  var questionId = \"question__\".concat(questionIndex);\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n\n      _onSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      htmlFor: alternativeId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      // style={{ display: 'none' }}\n      id: alternativeId,\n      name: questionId,\n      type: \"radio\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"))));\n}\n\n_c2 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s();\n\n  var _React$useState = React.useState(screenStates.LOADING),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      screenState = _React$useState2[0],\n      setScreenState = _React$useState2[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      currentQuestion = _React$useState4[0],\n      setCurrentQuestion = _React$useState4[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex];\n  React.useEffect(function () {\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 5000);\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 49\n    }\n  }, \"Voc\\xEA acertou X quest\\xF5es, parab\\xE9ns!\")));\n}\n\n_s(QuizPage, \"uFzTItWrf72xkd+gzQBa3gJACYU=\");\n\n_c3 = QuizPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LoadingWidget\");\n$RefreshReg$(_c2, \"QuestionWidget\");\n$RefreshReg$(_c3, \"QuizPage\");","map":{"version":3,"sources":["C:/xampp/htdocs/aluraquiz-startrek/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","questionId","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","alternatives","map","alternative","alternativeIndex","alternativeId","screenStates","QUIZ","LOADING","RESULT","QuizPage","useState","screenState","setScreenState","questions","length","currentQuestion","setCurrentQuestion","useEffect","setTimeout","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport db from '../db.json';\r\nimport Widget from '../src/components/Widget';\r\nimport QuizLogo from '../src/components/QuizLogo';\r\nimport QuizBackground from '../src/components/QuizBackground';\r\nimport QuizContainer from '../src/components/QuizContainer';\r\nimport Button from '../src/components/Button';\r\n\r\nfunction LoadingWidget() {\r\n  return (\r\n    <Widget>\r\n      <Widget.Header>\r\n        Carregando...\r\n      </Widget.Header>\r\n\r\n      <Widget.Content>\r\n        [Desafio do Loading]\r\n      </Widget.Content>\r\n    </Widget>\r\n  );\r\n}\r\n\r\nfunction QuestionWidget({\r\n  question,\r\n  questionIndex,\r\n  totalQuestions,\r\n  onSubmit,\r\n}) {\r\n  const questionId = `question__${questionIndex}`;\r\n  return (\r\n    <Widget>\r\n      <Widget.Header>\r\n        {/* <BackLinkArrow href=\"/\" /> */}\r\n        <h3>\r\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\r\n        </h3>\r\n      </Widget.Header>\r\n\r\n      <img\r\n        alt=\"Descrição\"\r\n        style={{\r\n          width: '100%',\r\n          height: '150px',\r\n          objectFit: 'cover',\r\n        }}\r\n        src={question.image}\r\n      />\r\n      <Widget.Content>\r\n        <h2>\r\n          {question.title}\r\n        </h2>\r\n        <p>\r\n          {question.description}\r\n        </p>\r\n\r\n        <form\r\n          onSubmit={(infosDoEvento) => {\r\n            infosDoEvento.preventDefault();\r\n            onSubmit();\r\n          }}\r\n        >\r\n          {question.alternatives.map((alternative, alternativeIndex) => {\r\n            const alternativeId = `alternative__${alternativeIndex}`;\r\n            return (\r\n              <Widget.Topic\r\n                as=\"label\"\r\n                htmlFor={alternativeId}\r\n              >\r\n                <input\r\n                  // style={{ display: 'none' }}\r\n                  id={alternativeId}\r\n                  name={questionId}\r\n                  type=\"radio\"\r\n                />\r\n                {alternative}\r\n              </Widget.Topic>\r\n            );\r\n          })}\r\n\r\n          {/* <pre>\r\n            {JSON.stringify(question, null, 4)}\r\n          </pre> */}\r\n          <Button type=\"submit\">\r\n            Confirmar\r\n          </Button>\r\n        </form>\r\n      </Widget.Content>\r\n    </Widget>\r\n  );\r\n}\r\n\r\nconst screenStates = {\r\n  QUIZ: 'QUIZ',\r\n  LOADING: 'LOADING',\r\n  RESULT: 'RESULT',\r\n};\r\n\r\nexport default function QuizPage() {\r\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\r\n  const totalQuestions = db.questions.length;\r\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\r\n  const questionIndex = currentQuestion;\r\n  const question = db.questions[questionIndex];\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setScreenState(screenStates.QUIZ);\r\n    }, 1 * 5000);\r\n  }, []);\r\n\r\n  function handleSubmitQuiz() {\r\n    const nextQuestion = questionIndex + 1;\r\n    if (nextQuestion < totalQuestions) {\r\n      setCurrentQuestion(nextQuestion);\r\n    } else {\r\n      setScreenState(screenStates.RESULT);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <QuizBackground backgroundImage={db.bg}>\r\n      <QuizContainer>\r\n        <QuizLogo />\r\n        {screenState === screenStates.QUIZ && (\r\n          <QuestionWidget\r\n            question={question}\r\n            questionIndex={questionIndex}\r\n            totalQuestions={totalQuestions}\r\n            onSubmit={handleSubmitQuiz}\r\n          />\r\n        )}\r\n\r\n        {screenState === screenStates.LOADING && <LoadingWidget />}\r\n\r\n        {screenState === screenStates.RESULT && <div>Você acertou X questões, parabéns!</div>}\r\n      </QuizContainer>\r\n    </QuizBackground>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}